
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import logging

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# Define states
NAME, PHONE, EXPERIENCE, TOOL, CAR, CITIZEN, HABITS, PHOTO, READY = range(9)

# Start handler with custom button
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üöÄ –ü–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞–±–∏—Ä–∞–µ–º –ø–ª–∏—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã –æ—Ç –õ–µ—Ä—É–∞ –ú–µ—Ä–ª–µ–Ω.\n\n"
        "–î–æ—Ö–æ–¥ –æ—Ç 100 000 ‚ÇΩ/–º–µ—Å. –†–∞–±–æ—Ç–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è, –≤—ã–ø–ª–∞—Ç—ã –¥–≤–∞–∂–¥—ã –≤ –º–µ—Å—è—Ü.\n\n"
        "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É!",
        reply_markup=markup,
    )
    return NAME

async def begin_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    return PHONE

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    return EXPERIENCE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –ø–ª–∏—Ç–∫—É?")
    return TOOL

async def get_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["experience"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç? (–î–∞/–ù–µ—Ç)")
    return CAR

async def get_tool(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tool"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å? (–î–∞/–ù–µ—Ç)")
    return CITIZEN

async def get_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["car"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§? (–î–∞/–ù–µ—Ç)")
    return HABITS

async def get_citizen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["citizen"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏? (–∫—É—Ä–µ–Ω–∏–µ, –∞–ª–∫–æ–≥–æ–ª—å, –æ–ø–æ–∑–¥–∞–Ω–∏—è –∏ —Ç.–¥.)")
    return PHOTO

async def get_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["habits"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ 1‚Äì2 —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç:")
    return READY

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photo"] = update.message.photo[-1].file_id if update.message.photo else "–Ω–µ—Ç —Ñ–æ—Ç–æ"
    await update.message.reply_text("–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤—ã–π—Ç–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç?")
    return ConversationHandler.END

async def final_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ready"] = update.message.text

    user_info = "\n".join([f"{key}: {value}" for key, value in context.user_data.items()])
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:\n\n{user_info}\n\n–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–æ—Ç –º–æ—Ç–∏–≤–∞—à–∫–∞ üëá")

    try:
        await update.message.reply_video_note(open("motivation.mp4", "rb"))
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: " + str(e))

    return ConversationHandler.END

# Run the bot
TOKEN = os.getenv("TELEGRAM_TOKEN")
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.Regex("üöÄ –ü–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"), begin_form),
    ],
    states={
        NAME: [MessageHandler(filters.Regex("üöÄ –ü–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"), begin_form)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        TOOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_experience)],
        CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tool)],
        CITIZEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car)],
        HABITS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_citizen)],
        PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_habits)],
        READY: [MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), final_step)],
    },
    fallbacks=[],
)

app.add_handler(conv_handler)
app.run_polling()
